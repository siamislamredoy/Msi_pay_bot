import telebot
import sqlite3
from datetime import datetime

API_KEY = '7576082738:AAHHUX4XhY0FwAwhu-lLbAhhfQcI8V0gEn4'
ADMIN_IDS = [7901308168]  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶∏‡¶æ‡¶®
WITHDRAW_CHANNEL_ID = -1002439365996  # ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø
RECHARGE_CHANNEL_ID = -1002439365996  # ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø

bot = telebot.TeleBot(API_KEY)

# ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø
def init_db():
    conn = sqlite3.connect("balances.db")
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER DEFAULT 0
    )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        sender_id INTEGER,
        receiver_id INTEGER,
        amount INTEGER,
        type TEXT,
        timestamp TEXT
    )''')
    conn.commit()
    conn.close()

init_db()

# ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
def update_balance(user_id, amount):
    conn = sqlite3.connect("balances.db")
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)", (user_id,))
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

# ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
def get_balance(user_id):
    conn = sqlite3.connect("balances.db")
    cur = conn.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    return row[0] if row else 0

# ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°
def record_transaction(sender, receiver, amount, tx_type):
    conn = sqlite3.connect("balances.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO transactions (sender_id, receiver_id, amount, type, timestamp) VALUES (?, ?, ?, ?, ?)",
        (sender, receiver, amount, tx_type, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
    conn.close()

# /balance
@bot.message_handler(commands=['balance'])
def balance(message):
    bal = get_balance(message.from_user.id)
    bot.reply_to(message, f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {bal} ‡¶ü‡¶æ‡¶ï‡¶æ")

# /ing user_id amount
@bot.message_handler(commands=['ing'])
def admin_add_balance(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        update_balance(user_id, amount)
        record_transaction(message.from_user.id, user_id, amount, "admin_add")
        bot.reply_to(message, f"‚úÖ {user_id} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        bot.send_message(user_id, f"üì• ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except:
        bot.reply_to(message, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§\n‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó: /ing user_id amount")

# /dig user_id amount
@bot.message_handler(commands=['dig'])
def admin_deduct_balance(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        parts = message.text.split()
        user_id = int(parts[1])
        amount = int(parts[2])
        if get_balance(user_id) < amount:
            bot.reply_to(message, "‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§")
            return
        update_balance(user_id, -amount)
        record_transaction(user_id, message.from_user.id, amount, "admin_deduct")
        bot.reply_to(message, f"‚úÖ {user_id} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        bot.send_message(user_id, f"üì§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except:
        bot.reply_to(message, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§\n‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó: /dig user_id amount")

# /send user_id amount
@bot.message_handler(commands=['send'])
def send_balance(message):
    try:
        parts = message.text.split()
        receiver = int(parts[1])
        amount = int(parts[2])
        sender = message.from_user.id

        if get_balance(sender) < amount:
            bot.reply_to(message, "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§")
            return

        update_balance(sender, -amount)
        update_balance(receiver, amount)
        record_transaction(sender, receiver, amount, "send")

        bot.reply_to(message, f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø {receiver} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§")
        bot.send_message(receiver, f"üì• ‡¶Ü‡¶™‡¶®‡¶ø {sender} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§")
    except:
        bot.reply_to(message, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§\n‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó: /send user_id amount")

# /withdraw 01xxxxxxxxx amount
@bot.message_handler(commands=['withdraw'])
def withdraw(message):
    try:
        parts = message.text.split()
        number = parts[1]
        amount = int(parts[2])
        user_id = message.from_user.id
        total = int(amount * 1.1)

        if get_balance(user_id) < total:
            bot.reply_to(message, "‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§")
            return

        update_balance(user_id, -total)
        record_transaction(user_id, 0, amount, "withdraw")

        forward_msg = f"üì§ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü\nüë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {user_id}\nüìû ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number}\nüí∞ ‡¶è‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü: {amount} ‡¶ü‡¶æ‡¶ï‡¶æ (‡ßß‡ß¶% ‡¶´‡¶ø ‡¶∏‡¶π ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá {total})"
        bot.send_message(WITHDRAW_CHANNEL_ID, forward_msg)
        bot.reply_to(message, f"‚úÖ {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except:
        bot.reply_to(message, "‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßÅ‡¶≤‡•§\n‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó: /withdraw 01xxxxxxxxx amount")

# /recharge 01xxxxxxxxx amount
@bot.message_handler(commands=['recharge'])
def recharge(message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            raise ValueError("Invalid format")
        
        number = parts[1]
        if not number.isdigit() or not number.startswith("01") or len(number) != 11:
            raise ValueError("Invalid number")

        amount = int(parts[2])
        if amount <= 0:
            raise ValueError("Amount must be positive")

        user_id = message.from_user.id
        total = amount + 5

        if get_balance(user_id) < total:
            bot.reply_to(message, "‚ùå ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§")
            return

        update_balance(user_id, -total)
        record_transaction(user_id, 0, amount, "recharge")

        forward_msg = f"üîã ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü\nüë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {user_id}\nüìû ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number}\nüí∞ ‡¶è‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü: {amount} ‡¶ü‡¶æ‡¶ï‡¶æ (+‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡¶ø)"
        bot.send_message(RECHARGE_CHANNEL_ID, forward_msg)
        bot.reply_to(message, f"‚úÖ {amount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    except ValueError as e:
        bot.reply_to(message, "‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\n‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: /recharge 01xxxxxxxxx amount")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {str(e)}")

# /history
@bot.message_handler(commands=['history'])
def history(message):
    user_id = message.from_user.id
    conn = sqlite3.connect("balances.db")
    cur = conn.cursor()
    cur.execute("""SELECT sender_id, receiver_id, amount, type, timestamp
                   FROM transactions
                   WHERE sender_id = ? OR receiver_id = ?
                   ORDER BY timestamp DESC
                   LIMIT 20""", (user_id, user_id))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        bot.reply_to(message, "üì≠ ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        return

    msg = "üìú ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡ß®‡ß¶‡¶ü‡¶ø ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®:\n\n"
    for s, r, a, t, ts in rows:
        if t == "send":
            if s == user_id:
                msg += f"üî¥ ‡¶Ü‡¶™‡¶®‡¶ø {r} ‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶® ‚Äî {a} ‡¶ü‡¶æ‡¶ï‡¶æ\nüïì {ts}\n\n"
            else:
                msg += f"üü¢ ‡¶Ü‡¶™‡¶®‡¶ø {s} ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶® ‚Äî {a} ‡¶ü‡¶æ‡¶ï‡¶æ\nüïì {ts}\n\n"
        elif t == "withdraw":
            msg += f"üì§ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‚Äî {a} ‡¶ü‡¶æ‡¶ï‡¶æ\nüïì {ts}\n\n"
        elif t == "recharge":
            msg += f"üîã ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‚Äî {a} ‡¶ü‡¶æ‡¶ï‡¶æ\nüïì {ts}\n\n"
        elif t == "admin_add":
            msg += f"‚ûï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® {s} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá {a} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®\nüïì {ts}\n\n"
        elif t == "admin_deduct":
            msg += f"‚ûñ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá {a} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®\nüïì {ts}\n\n"

    bot.reply_to(message, msg)
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """üõ†Ô∏è *‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ*:

üìå /balance - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®  
üìå /send `user_id amount` - ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®  
üìå /withdraw `01xxxxxxxxx amount` - ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü (‡ßß‡ß¶% ‡¶´‡¶ø ‡¶∏‡¶π ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶¨‡ßá)  
üìå /recharge `01xxxxxxxxx amount` - ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∞‡¶ø‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü (‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶´‡¶ø ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶¨‡ßá)  
üìå /history - ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡ß®‡ß¶‡¶ü‡¶ø ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®  
üìå /accinfo - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶Ü‡¶∏‡¶¨‡ßá

üëÆ‚Äç‚ôÇÔ∏è *‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø:*  
üîß /ing `user_id amount` - ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®  
üîß /dig `user_id amount` - ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡¶ø‡¶®
"""
    bot.reply_to(message, help_text, parse_mode="Markdown")
@bot.message_handler(commands=['accinfo'])
def acc_info(message):
    user = message.from_user
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
    username = f"@{user.username}" if user.username else "‚Äî"
    user_id = user.id

    msg = f"""üë§ *Account Info*

üìõ ‡¶®‡¶æ‡¶Æ: *{full_name}*  
üîñ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ: {username}  
üÜî ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: `{user_id}`
"""
    bot.reply_to(message, msg, parse_mode="Markdown")
# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ
print("‚úÖ Bot is running...")
bot.polling(non_stop=True)